buildscript {
    repositories {
        maven { url 'http://download.crashlytics.com/maven' }
    }

    dependencies {
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
    }
}
apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'

repositories {
    maven { url 'http://download.crashlytics.com/maven' }
}

apply plugin: 'android-apt'
apply plugin: 'crashlytics'

// Manifest version information!
def versionMajor = 2
def versionMinor = 0
def versionPatch = 15
def versionBuild = 0
def versionTag = '-alpha' // bump for dogfood builds, public betas, etc.

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

def isTravis = "true".equals(System.getenv("TRAVIS"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

def AAVersion = '3.1'

android {
    compileSdkVersion 19
    buildToolsVersion '19.1.0'

    // Generate version build from file
    def Properties versionProps = new Properties()
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.exists())
        versionProps.load(new FileInputStream(versionPropsFile))

    versionBuild = (versionProps['VERSION_CODE'] ?: "0").toInteger() + 1
    versionProps['VERSION_CODE'] = versionBuild.toString()
    versionProps.store(versionPropsFile.newWriter(), null)

    defaultConfig {

        applicationId 'com.cloudjay.cjay'
        minSdkVersion 16
        targetSdkVersion 16

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}${versionTag}-b${versionBuild}"

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
    }

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !isTravis
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            applicationVariants.all { variant ->

                variant.outputs.each { output ->
                    def date = new Date();
                    def formattedDate = date.format('yyyyMMddHHmmss')
                    output.outputFile = new File(
                            output.outputFile.parent,
                            output.outputFile.name.replace("app-release", "CJay-" + defaultConfig.versionName + '-' + formattedDate)
                    )
                }
            }
        }

//        debug {
//            applicationIdSuffix '.dev'
//            versionNameSuffix '-dev' + '-' + System.getenv('HOME').split('/').last()
//        }
    }
    lintOptions {
        abortOnError false
    }
    productFlavors {
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
    }
}

//evaluationDependsOn(":app")
//apply plugin: 'groovy'

dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:support-v4:20.0.0'
    compile 'eu.inmite.android.lib:android-styled-dialogs:1.2.0'
    compile 'com.crashlytics.android:crashlytics:1.+'
    compile 'com.netflix.rxjava:rxjava-core:0.16.1'
    compile 'com.netflix.rxjava:rxjava-android:0.16.1'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.3'
    compile 'de.greenrobot:eventbus:2.2.1'
    compile 'com.commonsware.cwac:camera:0.6.+'
    compile 'info.hoang8f:android-segmented:1.0.2'

    compile 'com.google.code.gson:gson:2.3'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    compile 'com.squareup.okhttp:okhttp:2.0.0'
    compile 'com.squareup.retrofit:retrofit:1.6.1'
    compile 'com.snappydb:snappydb-lib:0.5.0'
    compile 'com.esotericsoftware.kryo:kryo:2.24.0'

    apt "org.androidannotations:androidannotations:$AAVersion"
    compile "org.androidannotations:androidannotations-api:$AAVersion"

    compile files('libs/javax.annotation-3.2-b06.jar')
    compile files('libs/crouton-1.8.1.jar')
    compile files('libs/bcprov-jdk15on-1.47.jar')
    compile files('libs/Pubnub-Android-3.7.0.jar')
    compile files('libs/helpertoolsforandroid.jar')
    compile files('libs/commons-lang-2.6.jar')

    compile 'com.snappydb:snappydb-lib:0.5.0'
    compile 'com.esotericsoftware.kryo:kryo:2.24.0'
    compile 'org.droidparts:droidparts:2.6.2'

    compile 'com.github.rampo.updatechecker:library:2.1.4'
    compile 'com.squareup:tape:1.2.3'

    compile project(":jobqueue")
}

apt {
    arguments {

        androidManifestFile variant.outputs[0].processResources.manifestFile
        resourcePackageName 'com.cloudjay.cjay'

        // If you're using Android NBS flavors you should use the following line instead of hard-coded packageName
        // resourcePackageName android.defaultConfig.packageName

        // You can set optional annotation processing options here, like these commented options:
//        logLevel 'INFO'
        // logFile '/var/log/aa.log'

        logLevel 'trace'
        logConsoleAppender true
        trace true

    }
}

task zip2jar(type: Zip, dependsOn: "compileReleaseJava") {
    from 'build/intermediates/classes/release'
    destinationDir = file('build/libs')
    extension = "jar"
}